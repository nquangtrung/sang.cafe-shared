import { Model } from "./Model";
import { Photo } from "./Photo";
import { SearchRecord } from "./SearchRecord";
export interface IRestaurant {
    uid?: string;
    place?: any;
    saved?: boolean;
    ownerId: string;
    createdAt?: any;
    approved?: boolean;
    sold?: boolean;
    doc?: any;
    ad?: boolean;
    slug?: string;
    photos: (string | Photo)[];
    name: string;
    description: string;
    price: number;
    type: string;
    address: string;
    city: string;
    district: string;
    area: number;
    frontWidth: number;
    monthlyRent?: number;
    contractTimeLeft?: number;
    levels?: number;
    contact: string;
    contactPerson: string;
    landOwnerPhoneNumber?: string;
    since: number;
    revenue: number;
    grossProfit: number;
    menuPhotoUrl: string | Photo;
    bannerPhotoUrl?: string | Photo;
    businessLicensePhotoUrl: string | Photo;
    employeeCount: number;
    hasPos: boolean;
    show?: boolean;
    imageResized?: boolean;
    matches?: {
        fieldMatchingCount: number;
        fields: string[];
        search: SearchRecord;
    }[];
    privateAddress?: string;
    privateContact?: string;
    privateContactPerson?: string;
}
export declare class Restaurant extends Model {
    name: string;
    description: string;
    price: number;
    contact: string;
    contactPerson: string;
    type: string;
    photos: (string | Photo)[];
    uid?: string;
    place?: any;
    address: string;
    city: string;
    district: string;
    saved?: boolean;
    ownerId: string;
    createdAt?: any;
    approved: boolean;
    sold: boolean;
    doc?: any;
    since: number;
    revenue: number;
    grossProfit: number;
    menuPhotoUrl: string | Photo;
    businessLicensePhotoUrl: string | Photo;
    employeeCount: number;
    hasPos: boolean;
    ad: boolean;
    show: boolean;
    area: number;
    frontWidth: number;
    imageResized?: boolean;
    bannerPhotoUrl?: string | Photo;
    slug?: string;
    landOwnerPhoneNumber?: string;
    monthlyRent?: number;
    contractTimeLeft?: number;
    levels?: number;
    matches?: {
        fieldMatchingCount: number;
        fields: string[];
        search: SearchRecord;
    }[];
    privateAddress?: string;
    privateContact?: string;
    privateContactPerson?: string;
    constructor(obj?: IRestaurant);
    getThumpObj(photo: string | Photo): string | Photo;
    getMainPhotoObj(): string | Photo;
    getMainPhotoUrl(): string;
    getMainPhotoThumbUrl(): string;
    getThumbUrl(photo: string | Photo): string;
    getMainThumbHeight(): number;
    getBannerPhotoUrl(): string;
    createSchema(): any;
    onPrepareData(): any;
}
